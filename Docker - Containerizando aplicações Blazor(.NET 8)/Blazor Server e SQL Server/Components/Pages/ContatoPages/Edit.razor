@page "/Contatos/edit"
@inject BlazorSQLServer.Data.ApplicationDbContext DB
@using BlazorSQLServer.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Contato</h4>
<hr />
@if (Contato is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Contato" OnValidSubmit="UpdateContato" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Contato.Id" value="@Contato.Id" />
                <div class="mb-3">
                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="Contato.Nome" class="form-control" />
                    <ValidationMessage For="() => Contato.Nome" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="Contato.Email" class="form-control" />
                    <ValidationMessage For="() => Contato.Email" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/contatos">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Contato? Contato { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Contato ??= await DB.Contatos.FirstOrDefaultAsync(m => m.Id == Id);

        if (Contato is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateContato()
    {
        DB.Attach(Contato!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ContatoExists(Contato!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/contatos");
    }

    bool ContatoExists(int id)
    {
        return DB.Contatos.Any(e => e.Id == id);
    }
}
